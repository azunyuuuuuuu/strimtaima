@page "/"
@using System.Timers


<div class="flex flex-col group">

    <div class="flex mx-4 mt-3">
        <div class="flex-1"></div>
        <h1 class="flex-none displaytext" style="font-size: clamp(1rem, 14vw, 12rem);">
            @displaytext
        </h1>
        <div class="flex-1"></div>
    </div>

    <div class="flex m-2 space-x-2 opacity-0 group-hover:opacity-20 text-white">
        <div class="flex-1"></div>

        @if (!enabled)
        {
            <button class="flex-none px-2 py-1 bg-green-500 rounded" @onclick="StartTimer"><i class="fas fa-play"></i></button>
        }
        else
        {
            <button class="flex-none px-2 py-1 bg-green-500 rounded" @onclick="PauseTimer"><i class="fas fa-pause"></i></button>
        }

        <button class="flex-none px-2 py-1 bg-red-500 rounded" @onclick="ResetTimer"><i class="fas fa-stop"></i></button>
        <button class="flex-none px-2 py-1 bg-blue-500 rounded" @onclick=@(()=>SwitchToMode(TimerMode.Work))><i class="fas fa-pencil-alt"></i></button>
        <button class="flex-none px-2 py-1 bg-yellow-500 rounded" @onclick=@(()=>SwitchToMode(TimerMode.Break))><i class="fas fa-mug-hot"></i></button>

        @if (audioenabled)
        {
            <button class="flex-none px-2 py-1 bg-purple-500 rounded" @onclick="ToggleAudio"><i class="fas fa-volume-up"></i></button>
        }
        else
        {
            <button class="flex-none px-2 py-1 bg-purple-500 rounded" @onclick="ToggleAudio"><i class="fas fa-volume-mute"></i></button>
        }

        <div class="flex-1"></div>
    </div>
</div>

@if (audioenabled && playaudio > 0)
{
    <audio class="hidden" autoplay controls><source src="notification.mp3"/></audio>
}
else
{
    <audio class="hidden" muted controls><source src="notification.mp3"/></audio>
}

@code
{
    TimeSpan timeleft = TimeSpan.FromMinutes(25);
    string displaytext = "henlo :3";
    TimerMode _timermode = TimerMode.Work;

    private bool active = true;
    private bool enabled = false;
    private bool audioenabled = true;
    private int playaudio = 0;

    protected override async Task OnInitializedAsync()
    {
        RefreshLoop();
        await base.OnInitializedAsync();
    }

    private async Task RefreshLoop()
    {
        while (active)
        {
            await Task.Delay(TimeSpan.FromSeconds(1));

            if (enabled)
                timeleft -= TimeSpan.FromSeconds(1);

            if (enabled && timeleft <= TimeSpan.Zero)
                playaudio = 3;
            
            if (enabled && timeleft <= TimeSpan.Zero)
                enabled = false;

            if (playaudio > 0)
                playaudio--;

            displaytext = $"{timeleft.ToString(@"mm\:ss")} {_timermode}";

            StateHasChanged();
        }
    }

    private void StartTimer()
    {
        enabled = true;
    }

    private void PauseTimer()
    {
        enabled = false;
    }

    private void ResetTimer()
    {
        enabled = false;

        switch (_timermode)
        {
            case TimerMode.Work:
                timeleft = TimeSpan.FromMinutes(25);
                break;

            case TimerMode.Break:
                timeleft = TimeSpan.FromMinutes(10);
                break;
        }
    }

    private void ToggleAudio()
    {
        audioenabled = !audioenabled;
    }

    private void SwitchToMode(TimerMode mode)
    {
        _timermode = mode;
        ResetTimer();
    }

    enum TimerMode
    {
        Work,
        Break
    }
}
