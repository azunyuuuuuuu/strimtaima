@page "/"
@using System.Timers


<div class="grid grid-cols-1 grid-rows-2 p-8">

    <div class="flex">
        <div class="flex-1"></div>
        <h1 class="flex-none text-8xl displaytext">
            @displaytext
        </h1>
        <div class="flex-1"></div>
    </div>

    <div class="flex opacity-0 hover:opacity-10">
        <div class="flex-1"></div>
        @if (!enabled)
        {
            <button class="flex-none" @onclick="StartTimer">⏯</button>
        }
        else
        {
            <button class="flex-none" @onclick="PauseTimer">⏸</button>
        }
        <button class="flex-none" @onclick="ResetTimer">⏹</button>
        <button class="flex-none" @onclick=@(()=>SwitchToMode(TimerMode.Work))>📝</button>
        <button class="flex-none" @onclick=@(()=>SwitchToMode(TimerMode.Pause))>☕</button>
        <div class="flex-1"></div>
    </div>
</div>

@code
{
    TimeSpan timeleft = TimeSpan.FromSeconds(25);
    string displaytext = string.Empty;
    TimerMode _timermode = TimerMode.Work;

    private bool active = true;
    private bool enabled = false;

    protected override async Task OnInitializedAsync()
    {
        RefreshLoop();
        await base.OnInitializedAsync();
    }

    private async Task RefreshLoop()
    {
        while (active)
        {
            await Task.Delay(1000);

            if (enabled)
                timeleft -= TimeSpan.FromSeconds(1);

            if (enabled && timeleft <= TimeSpan.Zero)
                enabled = false;

            displaytext = $"{timeleft.ToString(@"mm\:ss")} {_timermode}";

            StateHasChanged();
        }
    }

    private void StartTimer()
    {
        enabled = true;
    }

    private void PauseTimer()
    {
        enabled = false;
    }

    private void ResetTimer()
    {
        enabled = false;
        switch (_timermode)
        {
            case TimerMode.Work:
                timeleft = TimeSpan.FromMinutes(25);
                break;

            case TimerMode.Pause:
                timeleft = TimeSpan.FromMinutes(10);
                break;
        }
    }

    private void SwitchToMode(TimerMode mode)
    {
        _timermode = mode;
        ResetTimer();
    }

    enum TimerMode
    {
        Work,
        Pause
    }
}
